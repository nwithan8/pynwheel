# generated by datamodel-codegen:
#   filename:  model.json
#   timestamp: 2021-04-24T01:29:43+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Optional
from uuid import UUID

from pydantic import BaseModel, Field


class Name(Enum):
    direct_deposit_switch = 'direct_deposit_switch'
    direct_deposit_payment = 'direct_deposit_payment'
    direct_deposit_allocations = 'direct_deposit_allocations'
    income = 'income'
    employment = 'employment'
    identity = 'identity'
    paystubs = 'paystubs'
    shifts = 'shifts'


class Outcome(Enum):
    success = 'success'
    error = 'error'
    pending = 'pending'


class Params(BaseModel):
    amount: Optional[int] = Field(
        None,
        description='The amount to allocate per paycheck in the direct_deposit_payment job.',
        title='Amount',
    )
    from_pay_date: Optional[date] = Field(
        None,
        description='The earliest pay date for the set of available paystubs in the paystubs job.',
        title='From Pay Date',
    )
    to_pay_date: Optional[date] = Field(
        None,
        description='The latest pay date for the set of available paystubs in the paystubs job.',
        title='To Pay Date',
    )
    count: Optional[int] = Field(
        None,
        description='The number of available data objects fetched in the job.',
        title='Count',
    )


class Job(BaseModel):
    id: UUID = Field(..., description='Unique identifier for the object.', title='Id')
    name: Name = Field(..., description='Name of the completed job.', title='Name')
    timestamp: datetime = Field(
        ..., description='ISO 8601 timestamp of job completion.', title='Timestamp'
    )
    outcome: Outcome = Field(
        ..., description='The outcome of the job.', title='Outcome'
    )
    error_code: Optional[str] = Field(
        None,
        description='On error, an explicit code describing the error.',
        title='Error Code',
    )
    error_type: Optional[str] = Field(
        None,
        description='On error, a high level classification of the error.',
        title='Error Type',
    )
    link_token_id: UUID = Field(
        ..., description='UUID of the link token.', title='Link Token Id'
    )
    params: Optional[Params] = Field(
        None, description='Input parameters to the job.', title='Params'
    )
    account_id: Optional[UUID] = Field(
        None, description='UUID of the payroll account.', title='Account Id'
    )
